<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleGetInfoString</key>
	<string></string>
	<key>CFBundleURLTypes</key>
	<array>
		<dict>
			<key>CFBundleTypeRole</key>
			<string>Editor</string>
			<key>CFBundleURLName</key>
			<string>nightingale</string>
			<key>CFBundleURLSchemes</key>
			<array>
				<string>nightingale</string>
			</array>
		</dict>
	</array>
	<key>REDIRECT_URI</key>
	<string>$(REDIRECT_URI)</string>
	<key>SOUND_CLOUD_CLIENT_ID</key>
	<string>$(SOUND_CLOUD_CLIENT_ID)</string>
	<key>SOUND_CLOUD_CLIENT_SECRET</key>
	<string>$(SOUND_CLOUD_CLIENT_SECRET)</string>
	<key>UIBackgroundModes</key>
	<array>
		<string>audio</string>
	</array>
	<key>Write

Sign in
Better Programming
Better Programming

Advice for programmers.

Manage Secrets in Your iOS App Using Xcode Configuration Files
Secure your API keys and other sensitive data
Zafar Ivaev
Zafar Ivaev
4 min read
¬∑
Jun 23, 2021

Press enter or click to view image in full size
MacBook
Photo by Dmitry Chernyshov on Unsplash.

In this article, we will learn how to manage sensitive data such as API keys in iOS apps using Xcode configuration files (.xcconfig). This is what we will master in this tutorial:

    How to create Xcode configuration files.
    How to access an API key from a configuration file in your Swift code.
    How to run and manage different build configurations.

Let‚Äôs Start

Consider this empty project called ‚ÄúManagingSecrets‚Äù that does not contain anything yet:
New empty project

Our goal is to secure an API key and access it in a ViewController.swift file. First, let‚Äôs create a configuration settings file. Tap on File &gt; New and input ‚ÄúConfig‚Äù in the search field:
Press enter or click to view image in full size
Creating a config file

Now, choose ‚ÄúNext‚Äù and name the file Secrets.xcconfig (do not attach this file to a target):
Press enter or click to view image in full size
Naming the new file

Now we can open the file and add our API key:
Press enter or click to view image in full size
Adding API key to file

Great! Our API key has been added. Now let‚Äôs tap on the project, choose the ‚ÄúInfo‚Äù tab, and expand the Debug and Release configurations:
Press enter or click to view image in full size
Expanding the configurations

The next step is to attach the Secrets.xcconfig file to each configuration as follows:
Press enter or click to view image in full size
Attaching config file to each config

Once you are done, this is how the Configurations look:
Press enter or click to view image in full size
Configurations

The last step we need to do before we can actually access this API key in code is update our Info.plist with a new API_KEY field:
Press enter or click to view image in full size
Updating Info.plist file

Finally, we are ready to fetch our API key in the ViewController.swift file. Let‚Äôs update the viewDidLoad() method as follows:

    We search for the ‚ÄúAPI_KEY‚Äù value in the Info.plist file.
    We make sure the key is not empty.
    If it‚Äôs empty, we print a message.
    Otherwise, we print the found API key.

If we build and run the app, we will see the API key printed as expected:
Press enter or click to view image in full size
API key printed

This is great, but how do we create different API keys for Debug and Release configurations? It turns out it is very easy and you will be able to forget about manually changing your hardcoded string each time you switch between the debug and production server APIs.
Managing Different Configurations

We simply need to create two different .xcconfig files, namely SecretsDebug.xcconfig and SecretsRelease.xcconfig:
Two config files

Each of the files contains a different API_KEY:
Press enter or click to view image in full size
One API key
SecretsDebug.xcconfig
Press enter or click to view image in full size
A different API key
SecretsRelease.xcconfig

Next, we should assign the SecretsDebug.xcconfig to the Debug configuration and SecretsRelease.xcconfig to the Release one:
Press enter or click to view image in full size
Assigning config files to configurations

Our Info.plist remains the same. It simply references the API_KEY value from the currently active configuration file:
Press enter or click to view image in full size
Info.plist

By default, when we run our app in Simulator, a Debug configuration is chosen:
Press enter or click to view image in full size
Debug config chosen by default

To switch to the Release configuration, all we need to do is change the scheme of our app:
Press enter or click to view image in full size
Changing app scheme
Press enter or click to view image in full size
Changing app scheme

If we build and run the app, we will see that the release version of our API key was used:
Press enter or click to view image in full size
Release version of API key

Great! We managed to conveniently use different API keys without changing a single String in our code base.
Get Zafar Ivaev‚Äôs stories in your inbox

Join Medium for free to get updates from this writer.

Note: It is important to remember to keep these Secret.xcconfig files out of version control. Simply include them in your .gitignore file, and you will avoid leaking your sensitive data to other people. Even if you are working on a team, other developers will use their own local .xcconfig files containing those secrets.
Wrapping Up

To dive deeper and learn the difference between this approach for managing environments and one using different targets, I suggest taking a look at this great article by
Sven Korset
.

I hope you found this tutorial useful. Thanks for reading!
Programming
Swift
IOS
Mobile
Coffee2021

Better Programming
Published in Better Programming
222K followers
¬∑
Last published Nov 10, 2023

Advice for programmers.
Zafar Ivaev
Written by Zafar Ivaev
3.4K followers
¬∑
4 following

Senior iOS Engineer. I write about features of Swift and iOS development practices.
Responses (3)

Write a response

What are your thoughts?
Aaron Smith

Aaron Smith

Jun 25, 2021

Hmm. Info.plist will still contain your api key after building won‚Äôt it? $API_KEY is a variable that gets replaced with what you had in the config isn‚Äôt it? So you‚Äôre still leaking the API key if someone viewed the ipa info plist.

12

Bruno Lorenzo

Bruno Lorenzo

Oct 18, 2021

Great article! üëèüèª
One drawback that I see using this approach is that if in the future you want to add more entries, you'll need to add those in the xconfig files and in the info.plist as well.
One alternative that I like is to create a config.plist‚Ä¶

2

Muhammed Tanriverdi

Muhammed Tanriverdi

Sep 24, 2021 (edited)

This approach is a good way to classify secret keys for different environments such as dev, stage, prod. So we can ignore the sensitive data from the GIT repository. But as Aaron mentioned, it's really easy to see the keys by opening the plist file‚Ä¶

1

More from Zafar Ivaev and Better Programming
spinning wheel of bright neon lights set above a neon sign
Better Programming

In

Better Programming

by

Zafar Ivaev
Let‚Äôs Build a Circular Loading Indicator in Swift 5
You don‚Äôt need a third-party library for this
Oct 7, 2020
505
1
Advice From a Software Engineer With 8 Years of Experience
Better Programming

In

Better Programming

by

Benoit Ruiz
Advice From a Software Engineer With 8 Years of Experience
Practical tips for those who want to advance in their careers
Mar 20, 2023
19.7K
345
NumPy arrays
Better Programming

In

Better Programming

by

Lev Maximov
NumPy Illustrated: The Visual Guide to Numpy
Brush up your NumPy or learn it from scratch
Dec 21, 2020
3.5K
23
How to Modularize an iOS App
Level Up Coding

In

Level Up Coding

by

Zafar Ivaev
How to Modularize an iOS App
Leveraging XcodeGen and Clean Architecture principles
Sep 3, 2023
531
2
See all from Zafar Ivaev
See all from Better Programming
Recommended from Medium
Github Actions for iOS project
Oleksandr

Oleksandr
Github Actions for iOS project
If I ever end up in hell, my punishment will be maintaining forever failing Github Actions pipeline.
Apr 19
34
A modern MacBook running Xcode with an iOS app project open, connected via a glowing pipeline diagram to a backend server, representing automated CI/CD workflows for iOS and API deployments
Ravi

Ravi
CI/CD Pipelines for iOS + Backend: A Practical Guide for Mobile DevOps in 2025
How to set up a seamless CI/CD pipeline for iOS apps and backend APIs using Xcode Cloud, GitHub Actions, and modern deployment strategies.
Oct 1
SwiftUI in 2025: Forget MVVM
Thomas Ricouard

Thomas Ricouard
SwiftUI in 2025: Forget MVVM
Let me tell you why
Jun 2
1.4K
56
What‚Äôs New in Swift 6.2: Cleaner APIs, Safer Concurrency, and Speed
Stackademic

In

Stackademic

by

Alok Upadhyay
What‚Äôs New in Swift 6.2: Cleaner APIs, Safer Concurrency, and Speed
This version doesn‚Äôt try to impress with big syntax shifts. Instead, it‚Äôs focused on balance‚Ää‚Äî‚Äätightening performance where it matters‚Ä¶
Oct 8
80
1
App Shortcuts in iOS: Everything Developers Need to Know to Make Features Instantly Accessible
Himali Marasinghe

Himali Marasinghe
App Shortcuts in iOS: Everything Developers Need to Know to Make Features Instantly Accessible
Learn how to use App Shortcuts and the App Intents framework
Jul 7
27
1
Automating iOS CI/CD Pipeline for Merge Requests with GitLab CI
Islam Moussa

Islam Moussa
Automating iOS CI/CD Pipeline for Merge Requests with GitLab CI
Managing iOS programs at scale calls for a reliable and automated CI/CD technique to make sure code exceptional and speedy delivery. In‚Ä¶
Jun 18
See more recommendations

Help

Status

About

Careers

Press

Blog

Privacy

Rules

Terms

Text to speech
Write

Sign in
Better Programming
Better Programming

Advice for programmers.

Manage Secrets in Your iOS App Using Xcode Configuration Files
Secure your API keys and other sensitive data
Zafar Ivaev
Zafar Ivaev
4 min read
¬∑
Jun 23, 2021

Press enter or click to view image in full size
MacBook
Photo by Dmitry Chernyshov on Unsplash.

In this article, we will learn how to manage sensitive data such as API keys in iOS apps using Xcode configuration files (.xcconfig). This is what we will master in this tutorial:

    How to create Xcode configuration files.
    How to access an API key from a configuration file in your Swift code.
    How to run and manage different build configurations.

Let‚Äôs Start

Consider this empty project called ‚ÄúManagingSecrets‚Äù that does not contain anything yet:
New empty project

Our goal is to secure an API key and access it in a ViewController.swift file. First, let‚Äôs create a configuration settings file. Tap on File &gt; New and input ‚ÄúConfig‚Äù in the search field:
Press enter or click to view image in full size
Creating a config file

Now, choose ‚ÄúNext‚Äù and name the file Secrets.xcconfig (do not attach this file to a target):
Press enter or click to view image in full size
Naming the new file

Now we can open the file and add our API key:
Press enter or click to view image in full size
Adding API key to file

Great! Our API key has been added. Now let‚Äôs tap on the project, choose the ‚ÄúInfo‚Äù tab, and expand the Debug and Release configurations:
Press enter or click to view image in full size
Expanding the configurations

The next step is to attach the Secrets.xcconfig file to each configuration as follows:
Press enter or click to view image in full size
Attaching config file to each config

Once you are done, this is how the Configurations look:
Press enter or click to view image in full size
Configurations

The last step we need to do before we can actually access this API key in code is update our Info.plist with a new API_KEY field:
Press enter or click to view image in full size
Updating Info.plist file

Finally, we are ready to fetch our API key in the ViewController.swift file. Let‚Äôs update the viewDidLoad() method as follows:

    We search for the ‚ÄúAPI_KEY‚Äù value in the Info.plist file.
    We make sure the key is not empty.
    If it‚Äôs empty, we print a message.
    Otherwise, we print the found API key.

If we build and run the app, we will see the API key printed as expected:
Press enter or click to view image in full size
API key printed

This is great, but how do we create different API keys for Debug and Release configurations? It turns out it is very easy and you will be able to forget about manually changing your hardcoded string each time you switch between the debug and production server APIs.
Managing Different Configurations

We simply need to create two different .xcconfig files, namely SecretsDebug.xcconfig and SecretsRelease.xcconfig:
Two config files

Each of the files contains a different API_KEY:
Press enter or click to view image in full size
One API key
SecretsDebug.xcconfig
Press enter or click to view image in full size
A different API key
SecretsRelease.xcconfig

Next, we should assign the SecretsDebug.xcconfig to the Debug configuration and SecretsRelease.xcconfig to the Release one:
Press enter or click to view image in full size
Assigning config files to configurations

Our Info.plist remains the same. It simply references the API_KEY value from the currently active configuration file:
Press enter or click to view image in full size
Info.plist

By default, when we run our app in Simulator, a Debug configuration is chosen:
Press enter or click to view image in full size
Debug config chosen by default

To switch to the Release configuration, all we need to do is change the scheme of our app:
Press enter or click to view image in full size
Changing app scheme
Press enter or click to view image in full size
Changing app scheme

If we build and run the app, we will see that the release version of our API key was used:
Press enter or click to view image in full size
Release version of API key

Great! We managed to conveniently use different API keys without changing a single String in our code base.
Get Zafar Ivaev‚Äôs stories in your inbox

Join Medium for free to get updates from this writer.

Note: It is important to remember to keep these Secret.xcconfig files out of version control. Simply include them in your .gitignore file, and you will avoid leaking your sensitive data to other people. Even if you are working on a team, other developers will use their own local .xcconfig files containing those secrets.
Wrapping Up

To dive deeper and learn the difference between this approach for managing environments and one using different targets, I suggest taking a look at this great article by
Sven Korset
.

I hope you found this tutorial useful. Thanks for reading!
Programming
Swift
IOS
Mobile
Coffee2021

Better Programming
Published in Better Programming
222K followers
¬∑
Last published Nov 10, 2023

Advice for programmers.
Zafar Ivaev
Written by Zafar Ivaev
3.4K followers
¬∑
4 following

Senior iOS Engineer. I write about features of Swift and iOS development practices.
Responses (3)

Write a response

What are your thoughts?
Aaron Smith

Aaron Smith

Jun 25, 2021

Hmm. Info.plist will still contain your api key after building won‚Äôt it? $API_KEY is a variable that gets replaced with what you had in the config isn‚Äôt it? So you‚Äôre still leaking the API key if someone viewed the ipa info plist.

12

Bruno Lorenzo

Bruno Lorenzo

Oct 18, 2021

Great article! üëèüèª
One drawback that I see using this approach is that if in the future you want to add more entries, you'll need to add those in the xconfig files and in the info.plist as well.
One alternative that I like is to create a config.plist‚Ä¶

2

Muhammed Tanriverdi

Muhammed Tanriverdi

Sep 24, 2021 (edited)

This approach is a good way to classify secret keys for different environments such as dev, stage, prod. So we can ignore the sensitive data from the GIT repository. But as Aaron mentioned, it's really easy to see the keys by opening the plist file‚Ä¶

1

More from Zafar Ivaev and Better Programming
spinning wheel of bright neon lights set above a neon sign
Better Programming

In

Better Programming

by

Zafar Ivaev
Let‚Äôs Build a Circular Loading Indicator in Swift 5
You don‚Äôt need a third-party library for this
Oct 7, 2020
505
1
Advice From a Software Engineer With 8 Years of Experience
Better Programming

In

Better Programming

by

Benoit Ruiz
Advice From a Software Engineer With 8 Years of Experience
Practical tips for those who want to advance in their careers
Mar 20, 2023
19.7K
345
NumPy arrays
Better Programming

In

Better Programming

by

Lev Maximov
NumPy Illustrated: The Visual Guide to Numpy
Brush up your NumPy or learn it from scratch
Dec 21, 2020
3.5K
23
How to Modularize an iOS App
Level Up Coding

In

Level Up Coding

by

Zafar Ivaev
How to Modularize an iOS App
Leveraging XcodeGen and Clean Architecture principles
Sep 3, 2023
531
2
See all from Zafar Ivaev
See all from Better Programming
Recommended from Medium
Github Actions for iOS project
Oleksandr

Oleksandr
Github Actions for iOS project
If I ever end up in hell, my punishment will be maintaining forever failing Github Actions pipeline.
Apr 19
34
A modern MacBook running Xcode with an iOS app project open, connected via a glowing pipeline diagram to a backend server, representing automated CI/CD workflows for iOS and API deployments
Ravi

Ravi
CI/CD Pipelines for iOS + Backend: A Practical Guide for Mobile DevOps in 2025
How to set up a seamless CI/CD pipeline for iOS apps and backend APIs using Xcode Cloud, GitHub Actions, and modern deployment strategies.
Oct 1
SwiftUI in 2025: Forget MVVM
Thomas Ricouard

Thomas Ricouard
SwiftUI in 2025: Forget MVVM
Let me tell you why
Jun 2
1.4K
56
What‚Äôs New in Swift 6.2: Cleaner APIs, Safer Concurrency, and Speed
Stackademic

In

Stackademic

by

Alok Upadhyay
What‚Äôs New in Swift 6.2: Cleaner APIs, Safer Concurrency, and Speed
This version doesn‚Äôt try to impress with big syntax shifts. Instead, it‚Äôs focused on balance‚Ää‚Äî‚Äätightening performance where it matters‚Ä¶
Oct 8
80
1
App Shortcuts in iOS: Everything Developers Need to Know to Make Features Instantly Accessible
Himali Marasinghe

Himali Marasinghe
App Shortcuts in iOS: Everything Developers Need to Know to Make Features Instantly Accessible
Learn how to use App Shortcuts and the App Intents framework
Jul 7
27
1
Automating iOS CI/CD Pipeline for Merge Requests with GitLab CI
Islam Moussa

Islam Moussa
Automating iOS CI/CD Pipeline for Merge Requests with GitLab CI
Managing iOS programs at scale calls for a reliable and automated CI/CD technique to make sure code exceptional and speedy delivery. In‚Ä¶
Jun 18
See more recommendations

Help

Status

About

Careers

Press

Blog

Privacy

Rules

Terms

Text to speech
</key>
	<string></string>
</dict>
</plist>
